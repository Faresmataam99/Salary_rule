<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">

      <!-- Heure par jour --> <!--Validé-->
      <record id="hr_rule_heure_par_jour" model="hr.salary.rule">
        <field name="name">Heure par jour</field>
        <field name="sequence" eval="0"/>
        <field name="code">HJ</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.HJ"/>
        <field name="condition_select">none</field>
        <field name="quantity">173.33 / contract.base_mois</field>
        <field name="amount_select">fix</field>
        <field name="amount_fix">1</field>
        <field name="struct_id">1</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- ***** Salaire de base (mensuel) ***** --> <!--Validé-->
      <record id="hr_rule_basic_mensuel" model="hr.salary.rule">
        <field name="name">Salaire de base (mensuel)</field>
        <field name="sequence" eval="10"/>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="code">BASEM</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = contract.wage -((contract.wage / contract.base_mois) * worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0) -((contract.wage / contract.base_mois) * worked_days['CONGEXCEP'].number_of_days if 'CONGEXCEP' in worked_days else 0)</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- ***** Salaire de base (jour) ***** --><!--Validé-->
      <record id="hr_rule_basic_jour" model="hr.salary.rule">
        <field name="name">Salaire de base (jour)</field>
        <field name="sequence" eval="10"/>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="code">BASEJ</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = (contract.wage/contract.base_mois) * worked_days['WORK100'].number_of_days</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


       <!-- ***** Salaire de base (heure) ***** --><!--Fait --><!--Validé-->
      <record id="hr_rule_basic_heure" model="hr.salary.rule">
        <field name="name">Salaire de base (heure)</field>
        <field name="sequence" eval="10"/>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="code">BASEH</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = ( contract.wage/173.33 ) * worked_days['WORK100'].number_of_hours</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      

      <!-- ***** Début/Fin de contrat ***** --> <!--Fait --> <!--Validé-->
      <record id="hr_rule_contract_begin" model="hr.salary.rule">
        <field name="name">Début/Fin de contrat</field>
        <field name="sequence" eval="70"/>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="code">CONTR</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result=worked_days['CONTR'] if 'CONTR' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Abscence jour--> <!--Fait --> <!--Validé-->
      <record id="hr_rule_unpaid" model="hr.salary.rule">
        <field name="name">Absence jour</field>
        <field name="sequence" eval="80"/>
        <field name="code">ABSJ</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <!-- <field name="condition_python">result=worked_days.ABS and worked_days.ABS.number_of_days or 0</field> -->
        <field name="condition_python">"<![CDATA[result_rate = #result = -(contract.wage / contract.base_mois) * worked_days['ABS'].number_of_days
result_qty = worked_days['ABS'].number_of_days
result = -(contract.wage / contract.base_mois)]]></field>
        <field name="amount_select">code</field>
        <!-- <field name="amount_python_compute">result = -(contract.wage / contract.base_mois) * worked_days.ABS.number_of_days</field> -->
        <field name="amount_python_compute">result = -(contract.wage / contract.base_mois) * worked_days['LEAVE90'].number_of_days</field>
        
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- <![CDATA[result_rate = contract.iep_pourcentage * 100
result = categories['BASIC'] if worked_days['WORK100'].number_of_days != 0 else 0]] -->

      <!-- Abscence heure--> <!--Fait --><!--Validé-->
      <record id="hr_rule_unpaid_hour" model="hr.salary.rule">
        <field name="name">Absence heure</field>
        <field name="sequence" eval="90"/>
        <field name="code">ABSH</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = worked_days['ABSH'].amount if 'ABSH' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[result_rate = -(contract.wage / 173.33) * worked_days['ABSH'].number_of_hours
result_qty = worked_days['ABSH'].number_of_hours
result = -(contract.wage / 173.33)]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Impayé--> <!--Fait --><!--Validé-->
      <record id="hr_rule_im" model="hr.salary.rule">
        <field name="name">Impayé</field>
        <field name="sequence" eval="92"/>
        <field name="code">IM</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = worked_days['CIM'].amount if 'CIM' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[result_rate = -(contract.wage / contract.base_mois) * worked_days['CIM'].number_of_days
result_qty =  worked_days['CIM'].number_of_days
result = -(contract.wage / contract.base_mois) ]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>
      


      <!-- Coefficient prorata mensuel--> <!--Fait --><!--Validé-->
      <record id="hr_rule_coefficient_prorata_m" model="hr.salary.rule">
        <field name="name">Coefficient prorata mensuel</field>
        <field name="sequence" eval="130"/>
        <field name="code">COEFM</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COEFF"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"> <![CDATA[tmp_rate=0
if 'OUT' not in worked_days :
  tmp_rate=22-(worked_days['ABS'].number_of_days if 'ABS' in worked_days else 0)- (worked_days['LEAVE90'].number_of_days if 'LEAVE90' in worked_days else 0)- (worked_days['LEAVE110'].number_of_days if 'LEAVE110' in worked_days else 0) - (worked_days['AASS'].number_of_days if 'AASS' in worked_days else 0)
else:
  tmp_rate = (worked_days['WORK100'].number_of_days if 'WORK100' in worked_days else 0)
result= tmp_rate/contract.base_mois]]> </field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Coefficient prorata jour--> <!--Fait --><!--Validé-->
      <record id="hr_rule_coefficient_prorata_j" model="hr.salary.rule">
        <field name="name">Coefficient prorata jour</field>
        <field name="sequence" eval="130"/>
        <field name="code">COEFJ</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COEFF"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = ( worked_days['WORK100'].number_of_days / 22 ) + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)  / contract.base_mois</field>
      
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Coefficient prorata heure--> <!--Fait --><!--Validé-->
      <record id="hr_rule_coefficient_prorata_h" model="hr.salary.rule">
        <field name="name">Coefficient prorata heure</field>
        <field name="sequence" eval="130"/>
        <field name="code">COEFH</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COEFF"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = ( worked_days['WORK100'].number_of_hours / 173.33 ) + worked_days['LEAVE120'].number_of_hours if 'LEAVE120' in worked_days else 0 / contract.base_mois</field>
      
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- IEP --><!--Fait --><!--Validé-->
      <record model="hr.salary.rule" id="rule_iep">
        <field name="name">I.E.P</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">IEP</field>
        <field name="sequence">140</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = contract.iep_pourcentage</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[result_rate = contract.iep_pourcentage * 100
result = categories['BASIC'] if worked_days['WORK100'].number_of_days != 0 else 0]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Prime responsabilté --> <!--Fait --><!--Validé-->
      <record model="hr.salary.rule" id="rule_prime_responsabilite">
        <field name="name">Prime responsabilité (%)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">PRR</field>
        <field name="sequence">150</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = contract.prime_responsability or 0</field>
          <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_qty = contract.prime_responsability /100
result_rate = tmp_rate
result = contract.wage * (1 + (( inputs['HS50'].amount *1.50 if 'HS50' in inputs else 0) + ( inputs['HS75'].amount *1.750 if 'HS75' in inputs else 0) + ( inputs['HS100'].amount *2 if 'HS100' in inputs else 0) )/173.33)]]></field>
          <field name="struct_id" ref="hr_payroll.default_structure"/>
        </record>

      <!-- Prime de caisse  --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_caisse">
        <field name="name">Prime de caisse </field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">CAIS</field>
        <field name="sequence">155</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
       <field name="condition_select">python</field>
        <field name="condition_python">result= contract.cais or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.cais</field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation de prime de caisse --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_caisse">
        <field name="name">Régularisation de prime de caisse</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_CAIS</field>
        <field name="sequence">156</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        
        <field name="condition_python">result=inputs['R_CAIS'] if 'R_CAIS' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_CAIS'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>





      <!-- Prime de nuisance --> <!--fait--> <!--Validé-->
      <record model="hr.salary.rule" id="rule_nuisance">
        <field name="name">Prime de nuisance</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">NUIS</field>
        <field name="sequence">160</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.nuis or False</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))/contract.base_mois*100
result_qty = contract.nuis/100
result_rate = tmp_rate
result = contract.wage]]>
        </field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Prime de maître d'apprentissage  --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_appren">
        <field name="name">Prime de maître d'apprentissage</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">APRN</field>
        <field name="sequence">165</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
       <field name="condition_select">python</field>
        <field name="condition_python">result= contract.appren or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.appren</field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Régularisation de prime de maître d'apprentissage  --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_appren">
        <field name="name">Régularisation de prime de maître d'apprentissage </field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_APRN</field>
        <field name="sequence">166</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_APRN'] if 'R_APRN' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_APRN'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Prime de danger --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_danger">
        <field name="name">Prime de danger</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">DANG</field>
        <field name="sequence">170</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
       <field name="condition_select">python</field>
        <field name="condition_python">result= contract.dang or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.dang</field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

    <!-- Prime de rendement individuel --> <!--fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_prime_rendement_idv">
      <field name="name">Prime de rendement individuel</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">PRI</field>
      <field name="sequence">180</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.pri or False</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))/contract.base_mois*100
result_qty = contract.pri/100
result_rate = tmp_rate
result = contract.wage]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


      <!-- Indemnité Changement de Résidence --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_chnagement_residence">
        <field name="name">Indemnité Changement de Résidence</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">ICR</field>
        <field name="sequence">190</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['ICR'] if 'ICR' in inputs else False</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = inputs['ICR'].amount</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Congé payé --> <!--fait--><!--VALIDÉ-->
      <record model="hr.salary.rule" id="rule_conge_paye">
        <field name="name">Congé Payé</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">CP</field>
        <field name="sequence">200</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=worked_days['LEAVE120'] if 'LEAVE120' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"> <![CDATA[[result_qty = worked_days['LEAVE120'].number_of_days
result = (contract.wage / contract.base_mois)]]]> </field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Congé maladie --> <!--A faire--> <!--VALIDÉ-->
      <record id="hr_rule_cm" model="hr.salary.rule">
        <field name="name">Congé maladie</field>
        <field name="sequence" eval="110"/>
        <field name="code">UCM</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result=worked_days['CM'] if 'CM' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[result = -(contract.wage / contract.base_mois) * worked_days['LEAVE110'].number_of_days
result_qty =  worked_days['LEAVE110'].number_of_days
result = -(contract.wage / contract.base_mois)]]> </field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Congé maternité --> <!--A faire--> <!--VALIDÉ-->
      <record id="hr_rule_maternite" model="hr.salary.rule">
        <field name="name">Congé maternité</field>
        <field name="sequence" eval="120"/>
        <field name="code">MM</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result=worked_days['MM'] if 'MM' in worked_days else 0</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[result = -(contract.wage / contract.base_mois) * worked_days['MM'].number_of_days
result_qty = worked_days['MM'].number_of_days
result = -(contract.wage / contract.base_mois)]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Salaire (Base Indemnités) --> <!--fait--> <!--validé-->
      <record id="hr_rule_salaire_b_i" model="hr.salary.rule">
        <field name="name">Salaire (Base Indemnités)</field>
        <field name="sequence" eval="135"/>
        <field name="code">BASEINT</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = categories['BASIC'] if worked_days['WORK100'].number_of_days  != 0 else 0</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Heure supplémentaire 50% --><!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_heure_sup_50">
        <field name="name">HEUR SUP 50%</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">HS50</field>
        <field name="sequence">260</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['HS50'] if 'HS50' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.wage / 173.33</field>
        <field name="quantity">inputs['HS50'].amount</field>
        <field name="amount_percentage">150</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Heure supplémentaire 75% --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_heure_sup_75">
        <field name="name">HEUR SUP 75%</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">HS75</field>
        <field name="sequence">270</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['HS75'] if 'HS75' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.wage / 173.33</field>
        <field name="quantity">inputs['HS75'].amount</field>
        <field name="amount_percentage">175</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Heure supplémentaire 100% --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_heure_sup_100">
        <field name="name">HEUR SUP 100%</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">HS100</field>
        <field name="sequence">280</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['HS100'] if 'HS100' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.wage / 173.33</field>
        <field name="quantity">inputs['HS100'].amount</field>
        <field name="amount_percentage">200</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité de congé --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_indemnite_conge">
        <field name="name">Indemnité de congé</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">INDC</field>
        <field name="sequence">290</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['INDC'] if 'INDC' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['INDC'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name ="amount_python_compute"><![CDATA[# Available variables:

# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- IFSP montant--> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_ifsp">
        <field name="name">I.F.S.P</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">IFSP</field>
        <field name="sequence">300</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.ifsp or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.ifsp</field>
        <field name="quantity">worked_days['WORK100'].number_of_days / contract.base_mois</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- IFS --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_ifs">
        <field name="name">I.F.S</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">IFS</field>
        <field name="sequence">310</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.ifs or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.ifs</field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      

      <!-- Indemnité travail posté a 10% (05h à 21h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_trsptc10">
        <field name="name">Indemnité travail posté à 10% (05h à 21h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">TRPST10</field>
        <field name="sequence">320</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['TRPST10'] if 'TRPST10' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['TRPST10'].amount</field>
        <field name="amount_python_compute"> <![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité travail posté a 10% + 5% (21h à 00h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_trsptc15">
        <field name="name">Indemnité travail posté à 10% + 5% (21h à 00h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">TRPST15</field>
        <field name="sequence">330</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['TRPST15'] if 'TRPST15' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['TRPST15'].amount</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!--Indemnité travail posté a 10% + 15% (00h à 15h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_trsptc25">
        <field name="name">Indemnité travail posté à 10% + 15% (00h à 15h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">TRPST25</field>
        <field name="sequence">340</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['TRPST25'] if 'TRPST25' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['TRPST25'].amount</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Indemnité d'astreinte et de disponibilité permanent --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_astr">
        <field name="name">Indemnité d'astreinte et de disponibilité permanent</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">ASTR</field>
        <field name="sequence">350</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.astr or False</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))/contract.base_mois*100
result_qty = 1
result_rate = tmp_rate
result = contract.astr]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

     

      <!-- Indemnité des activités d'enseignement --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_ensg">
        <field name="name">Indemnité des activités d'enseignement</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">ENSG</field>
        <field name="sequence">360</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.ensg or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.ensg</field>
        <field> <![CDATA[tmp_rate=categories['COEFF'] *22
result_qty = tmp_rate
result_rate = 100
result = contract.contract.ensg]]> </field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité de gestion et de responsabilité --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_gesres">
        <field name="name">Indemnité de gestion et de responsabilité</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">GESRES</field>
        <field name="sequence">370</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.gesres or False</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))/contract.base_mois*100
result_qty = 1
result_rate = tmp_rate
result = contract.gesres]]></field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité des activités de contrôle --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_actcont">
        <field name="name">Indemnité des activités de contrôle</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">ACTR</field>
        <field name="sequence">380</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.actr or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.actr</field>
        <field name=""><![CDATA[tmp_rate=categories['COEFF'] *22
result_qty = tmp_rate
result_rate = 100
result = contract.actr]]></field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité des activités de contrôle --> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_actcont">
        <field name="name">Régularisation d'indemnité des activités de contrôle</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_ACTR</field>
        <field name="sequence">381</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_ACTR'] if 'R_ACTR' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_ACTR'].amount</field>
<field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité de documentation -->  <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_doc">
        <field name="name">Indemnité de documentation</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">DOCU</field>
        <field name="sequence">390</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.docu or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field> 
        <field name="amount_percentage_base">contract.docu</field>
        <field name="quantity">categories.COEFF</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité de documentation -->  <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_doc">
        <field name="name">Régularisation d'indemnité de documentation</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_DOCU</field>
        <field name="sequence">391</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_DOCU'] if 'R_DOCU' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_python_compute"> <![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>
        <field name="amount_percentage_base">inputs['R_DOCU'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Indemnité de suivi et d'inspection--> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_inspc">
        <field name="name">Indemnité de suivi et d'inspection</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">INSPC</field>
        <field name="sequence">400</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.inspc or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.inspc</field>
        <field name="amount_python_compute"> <![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>
        <field name="quantity">worked_days['WORK100'].number_of_days + (worked_days.['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0)</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

       <!-- Régularisation d'indemnité de suivi et d'inspection--> <!--fait--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_inspc">
        <field name="name">Régularisation d'indemnité de suivi et d'inspection</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_INSPC</field>
        <field name="sequence">401</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_INSPC'] if 'R_INSPC' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage_base">inputs['R_INSPC'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Avance sur salaire--> <!--fait-->
      <record model="hr.salary.rule" id="rule_avc_salaire">
        <field name="name">Avance sur salaire</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">AVSAL</field>
        <field name="sequence">410</field>
        <field name="active">false</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['AVSAL'] if 'AVSAL' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['AVSAL'].amount</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'avance sur salaire--> <!--fait-->
      <record model="hr.salary.rule" id="rule_reg_avc_salaire">
        <field name="name">Régularisation d'avance sur salaire</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_AVSAL</field>
        <field name="sequence">411</field>
        <field name="active">false</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_AVSAL'] if 'R_AVSAL' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_AVSAL'].amount</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Indemnité de départ volontaire--> <!--fait--><!--validé-->
      <record model="hr.salary.rule" id="rule_idv15">
        <field name="name">Indemnité de départ volontaire</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_15"/>
        <field name="code">IDV15</field>
        <field name="sequence">500</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['IDV15'] if 'IDV15' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base"> inputs['IDV15'].amount</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité de départ volontaire--> <!--fait--><!--validé-->
      <record model="hr.salary.rule" id="rule_reg_idv15">
        <field name="name">Régularisation d'indemnité de départ volontaire</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_15"/>
        <field name="code">R_IDV15</field>
        <field name="sequence">501</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_IDV15'] if 'R_IDV15' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]>
        <field name="amount_percentage_base"> inputs['R_IDV15'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

     <!--Prime de téléphone--> <!--fait--><!--validé-->
      <record id="hr_rule_prime_tel" model="hr.salary.rule">
        <field name="name">Prime de téléphone</field>
        <field name="sequence" eval="460"/>
        <field name="code">TEL</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result= contract.tel or False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">contract.tel</field>
        <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result = contract.tel
result_rate = tmp_rate]]></field>
        <field name="quantity">worked_days['WORK100'].number_of_days / contract.base_mois</field>
        <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
     </record>

      <!--Régularisation de prime de téléphone--> <!--fait--><!--validé-->
      <record id="hr_rule_reg_prime_tel" model="hr.salary.rule">
        <field name="name">Régularisation de prime de téléphone</field>
        <field name="sequence" eval="461"/>
        <field name="code">R_TEL</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_TEL'] if 'R_TEL' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage_base">inputs['R_TEL'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
     </record>


     <!-- Frais de restauration --> <!--fait--><!--validé-->
      <record model="hr.salary.rule" id="rule_resto">
        <field name="name">Frais de restauration</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
        <field name="code">RESTO</field>
        <field name="sequence">640</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['RESTO'] if 'RESTO' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['RESTO'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

       <!-- Régularisation de  frais de restauration --> <!--fait--><!--validé-->
      <record model="hr.salary.rule" id="rule_reg_resto">
        <field name="name">Régularisation de frais de restauration</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
        <field name="code">R_RESTO</field>
        <field name="sequence">641</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_RESTO'] if 'R_RESTO' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_RESTO'].amount</field>
        <field name="amount_python_code"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="quantity">1</field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Salaire de poste --> <!--Modif v--><!--validé-->
      <record id="hr_rule_salaire_poste" model="hr.salary.rule">
        <field name="name">Salaire de poste</field>
        <field name="sequence" eval="420"/>
        <field name="code">BCOT</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
        <field name="condition_select">none</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else categories['ALW']</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

    <!-- Securité Sociale --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_secu_social">
      <field name="name">Sécurité Sociale</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">SS</field>
      <field name="sequence">430</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">none</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-(categories['BASIC'] + categories['COT'] + categories['DED']) if worked_days['WORK100'].number_of_days != 0 else -(categories['COT'] + categories['DED'])</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">9</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de sécurité Sociale --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_secu_social">
      <field name="name">Régularisation de sécurité Sociale</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_SS</field>
      <field name="sequence">431</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_SS'] if 'R_SS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_SS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Cacobath --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_cacobath">
      <field name="name">Cacobath</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">BATH</field>
      <field name="sequence">440</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= employee.cacobath or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'])</field>
      <field name="quantity">37.5</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]>
      <field name="amount_percentage">0.01</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de cacobath --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_cacobath">
      <field name="name">Régularisation de cacobath</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_BATH</field>
      <field name="sequence">441</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_BATH'] if 'R_BATH' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_BATH'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- Indémenité de panier--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_prime_panier">
      <field name="name">Indemnité de Panier</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">IPAN</field>
      <field name="sequence">470</field>
      <field name="active">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result = contract.prime_panier or 0</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))
result_qty = tmp_rate
result_rate = 100
result = contract.prime_panier]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indémenité de panier--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_prime_panier">
      <field name="name">Régularisation d'indemnité de Panier</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">R_IPAN</field>
      <field name="sequence">471</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IPAN'] if 'R_IPAN' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IPAN'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indémenité de transport --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_prime_transport">
      <field name="name">Indemnité de Transport</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">ITRS</field>
      <field name="sequence">480</field>
      <field name="active">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result = contract.prime_transport or 0</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=(worked_days['WORK100'].number_of_days + (worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0))
result_qty = tmp_rate
result_rate = 100
result = contract.prime_transport]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indémenité de transport --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_prime_transport">
      <field name="name">Régularisation d'indemnité de Transport</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">R_ITRS</field>
      <field name="sequence">481</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>

      <field name="condition_python">result=inputs['R_ITRS'] if 'R_ITRS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ITRS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Salaire de base imposable IRG/mois -->  <!--fait--><!--validé-->
    <record id="hr_rule_salaire_impo_irg" model="hr.salary.rule">
      <field name="name">Salaire de base imposable IRG/mois</field>
      <field name="sequence" eval="530"/>
      <field name="code">SBI</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">(categories['BASIC'] + categories['COT'] + categories['IMP'] + categories['DED']) if worked_days['WORK100'].number_of_days != 0 else (categories['COT'] + categories['IMP'] + categories['DED'])</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

   

    <!-- IRG --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_irg">
      <field name="name">Impot sur le revenus global (IRG)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">IRG</field>
      <field name="sequence">540</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[salaire_mensuel = categories['BASIC'] + categories['COT'] + categories['DED'] +  categories['IMP']
if  contract.base_mois  != worked_days['WORK100'].number_of_days and worked_days['WORK100'].number_of_days != 0 :
    salaire_mensuel = salaire_mensuel * contract.base_mois / worked_days['WORK100'].number_of_days 
              
salaire_mensuel = salaire_mensuel-(salaire_mensuel%10)
if worked_days['WORK100'].number_of_days == 0 :  
    salaire_mensuel = categories['COT'] + categories['DED'] +  categories['IMP']
              
tt_irg = 0
if salaire_mensuel < 30000:
     tt_irg = 0
elif salaire_mensuel < 40000:
     tt_irg = (salaire_mensuel - 20000) * 0.23
elif salaire_mensuel < 80000:
     tt_irg = 4600 + (salaire_mensuel - 40000) * 0.27
elif salaire_mensuel < 160000:
      tt_irg = 15400 + (salaire_mensuel - 80000) * 0.30
elif salaire_mensuel < 320000:
      tt_irg = 39400 + (salaire_mensuel - 160000) * 0.33
elif salaire_mensuel > 320000:
      tt_irg = 92200 +  (salaire_mensuel - 320000) * 0.35
              
              
# ABATTEMEMNT 1
abat_irg = tt_irg * 0.4
if abat_irg < 1000:
    abat_irg = 1000
elif abat_irg > 1500:
    abat_irg = 1500
tt_irg -= abat_irg

if tt_irg < 0:
    tt_irg = 0
              
# ABATTEMEMNT 2
if salaire_mensuel > 30000 and salaire_mensuel < 35000:
      tt_irg = tt_irg * (137 / 51) - (27925 / 8)
              
# ABATTEMEMNT 3
if employee.disabled_or_retirement == True:
    if salaire_mensuel > 30000 and salaire_mensuel < 42500:
      tt_irg = tt_irg * (93 / 61) - (81213 / 41)
                      
if  contract.base_mois  != worked_days['WORK100'].number_of_days and worked_days['WORK100'].number_of_days != 0 :
    tt_irg = tt_irg * worked_days['WORK100'].number_of_days / contract.base_mois
              
result = -(tt_irg)]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'IRG --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_irg">
      <field name="name">Régularisation d'impot sur le revenus global (IRG)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_IRG</field>
      <field name="sequence">541</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IRG'] if 'R_IRG' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_IRG'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


     <!-- IRG 10%--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_irg_10">
      <field name="name">IRG 10%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">IRG10</field>
      <field name="sequence">570</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= categories['IMP10'] or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-categories['IMP10']</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">10</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'IRG 10%--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_irg_10">
      <field name="name">Régularisation d'IRG 10%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_IRG10</field>
      <field name="sequence">571</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IRG10'] if 'R_IRG10' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_IRG10'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
<field name="amount_python_compute"> <![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- IRG 15%--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_irg_15">
      <field name="name">IRG 15%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">IRG15</field>
      <field name="sequence">580</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= categories['IMP15'] or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-categories['IMP15']</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">15</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'IRG 15%--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_irg_15">
      <field name="name">Régularisation d'IRG 15%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_IRG15</field>
      <field name="sequence">581</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IRG15'] if 'R_IRG15' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_IRG15'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
<field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Retenue mutuelle --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_retenue_mutuelle">
      <field name="name">Retenue mutuelle</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">RTMU</field>
      <field name="sequence">560</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= employee.mutual_restraint or False</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[result_rate = employee.mutual_percentage
result = -(categories['BASIC'] + categories['ALW'])]]></field>
      
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de retenue mutuelle --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_retenue_mutuelle">
      <field name="name">Régularisation de retenue mutuelle</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R−RTMU</field>
      <field name="sequence">561</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_RTMU'] if 'R_RTMU' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_RTMU'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Frais de déplacement --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_frais_deplacement">
      <field name="name">Frais de deplacement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">FDEP</field>
      <field name="sequence">590</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['FDEP'] if 'FDEP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['FDEP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- Régularisation de frais de déplacement --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_frais_deplacement">
      <field name="name">Régularisation de frais de deplacement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R−FDEP</field>
      <field name="sequence">591</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_FDEP'] if 'R_FDEP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_FDEP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
<field name="ampunt_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Frais de mission-->  <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_frais_mission">
      <field name="name">Frais de mission</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">FRMS</field>
      <field name="sequence">600</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result = contract.frms or 0</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.frms</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"> <![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de frais de mission-->  <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_frais_mission">
      <field name="name">Régularisation de frais de mission</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_FRMS</field>
      <field name="sequence">601</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_FRMS'] if 'R_FRMS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_FRMS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


     <!-- Indemnité de véhicule particulier --><!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_veh_par">
      <field name="name">Indemnité de véhicule particulier</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">IVP</field>
      <field name="sequence">482</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.ivp or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.ivp</field>
      <field name="quantity">worked_days['WORK100'].number_of_days</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_rate = tmp_rate
result = contract.ivp]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indemnité de véhicule particulier --><!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_veh_par">
      <field name="name">Régularisation d'indemnité de véhicule particulier</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">R_IVP</field>
      <field name="sequence">483</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IVP'] if 'R_IVP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IVP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indemnité kilométrique--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_kilo">
      <field name="name">Indemnité kilométrique</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">IK</field>
      <field name="sequence">620</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['IK'] if 'IK' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['IK'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité kilométrique--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_kilo">
      <field name="name">Régularisation d'indemnité kilométrique</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R−IK</field>
      <field name="sequence">621</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IK'] if 'R_IK' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IK'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Frais d'hébergement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_frais_hbr">
      <field name="name">Frais d'hébergement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">HEBR</field>
      <field name="sequence">630</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['HEBR'] if 'HEBR' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['HEBR'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"> <![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de frais d'hébergement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_frais_hbr">
      <field name="name">Régularisation de frais d'hébergement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_HEBR</field>
      <field name="sequence">631</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_HEBR'] if 'R_HEBR' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_HEBR'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>



    <!-- Prime 8 Mars --> <!--FAIT--><!--validé-->
    <record model="hr.salary.rule" id="rule_prime_8mars">
      <field name="name">Prime 8 Mars</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">P8M</field>
      <field name="sequence">660</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['P8M'] if 'P8M' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['P8M'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime 8 Mars --> <!--FAIT--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_prime_8mars">
      <field name="name">Régularisation de prime 8 Mars</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_P8M</field>
      <field name="sequence">661</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_P8M'] if 'R_P8M' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_P8M'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indemnité pour salaire unique (IPSU) --> <!--FAIT--><!--validé-->
    <record model="hr.salary.rule" id="rule_salaire_unique">
      <field name="name">Indemnité pour salaire unique (IPSU)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">ISUQ</field>
      <field name="sequence">670</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['ISUQ'] if 'ISUQ' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['ISUQ'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indemnité pour salaire unique (IPSU) --> <!--FAIT--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_salaire_unique">
      <field name="name">Régularisation d'indemnité pour salaire unique (IPSU)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_ISUQ</field>
      <field name="sequence">671</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ISUQ'] if 'R_ISUQ' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ISUQ'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- Accompte --> <!--FAIT-->
    <record id="hr_rule_acompte" model="hr.salary.rule">
      <field name="name">Accompte</field>
      <field name="sequence" eval="680"/>
      <field name="code">ACOMP</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['ACMP'] if 'ACMP' in inputs else False</field>
      <field name="quantity">inputs['ACMP'].amount</field>
      <field name="amount_select">fix</field>
      <field name="amount_fix">1</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation Accompte --> <!--FAIT-->
    <record id="hr_rule_reg_acompte" model="hr.salary.rule">
      <field name="name">Régularisation Accompte</field>
      <field name="sequence" eval="681"/>
      <field name="code">R_ACOMP</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ACMP'] if 'R_ACMP' in inputs else False</field>
      <field name="quantity">inputs['R_ACMP'].amount</field>
      <field name="amount_select">fix</field>
      <field name="amount_fix">1</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Allocation maternité --> <!--FAIT--><!--validé-->
    <record id="hr_rule_alomat" model="hr.salary.rule">
      <field name="name">Allocation maternité</field>
      <field name="sequence" eval="690"/>
      <field name="code">ALOMAT</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['ALOMAT'] if 'ALOMAT' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['ALOMAT'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'allocation maternité --> <!--FAIT--><!--validé-->
    <record id="hr_rule_reg_alomat" model="hr.salary.rule">
      <field name="name">Régularisation d'allocation maternité</field>
      <field name="sequence" eval="691"/>
      <field name="code">R_ALOMAT</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ALOMAT'] if 'R_ALOMAT' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ALOMAT'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- Prêt--> <!--FAIT--><!--validé-->
    <record id="hr_rule_pret" model="hr.salary.rule">
      <field name="name">Prêt</field>
      <field name="sequence" eval="700"/>
      <field name="code">PRET</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['PRET'] if 'PRET' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['PRET'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de Prêt--> <!--FAIT--><!--validé-->
    <record id="hr_rule_reg_pret" model="hr.salary.rule">
      <field name="name">Régularisation de Prêt</field>
      <field name="sequence" eval="701"/>
      <field name="code">R_PRET</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_PRET'] if 'R_PRET' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_PRET'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Remb. pret --> <!--fait--><!--validé-->
    <record id="hr_rule_remb_pret" model="hr.salary.rule">
      <field name="name">Remboursement de prêt</field>
      <field name="sequence" eval="710"/>
      <field name="code">REMP</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['REMP'] if 'REMP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['REMP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"> <![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]> </field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
    <!-- Régularisation Remb. pret --> <!--fait--><!--validé-->
    <record id="hr_rule_reg_remb_pret" model="hr.salary.rule">
      <field name="name">Régularisation de remboursement de prêt</field>
      <field name="sequence" eval="711"/>
      <field name="code">R_REMP</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_REMP'] if 'R_REMP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-inputs['R_REMP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
<field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Montant du congé --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_montant_conge">
      <field name="name">Montant du congé</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="code">MC</field>
      <field name="sequence">425</field>
      <field name="active">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=worked_days['LEAVE120'] if 'LEAVE120' in worked_days else 0</field>
      <field name="amount_select">code</field>
      <field name="amount_python_select"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_python_compute">result = (contract.wage / contract.base_mois) * worked_days['LEAVE120'].number_of_days</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
   


    <!-- Allocation familliale (enfant à 300da) --> <!--fait--><!--validé-->
    <record id="hr_rule_allo_enf300" model="hr.salary.rule">
      <field name="name">Allocation familliale (enfant à 300da)</field>
      <field name="sequence" eval="720"/>
      <field name="code">ALOF1</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['ALOF1'] if 'ALOF1' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['ALOF1'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
    <!-- Régularisation d'allocation familliale (enfant à 300da) --> <!--fait--><!--validé-->
    <record id="hr_rule_reg_allo_enf300" model="hr.salary.rule">
      <field name="name"> Régularisation d'allocation familliale (enfant à 300da)</field>
      <field name="sequence" eval="721"/>
      <field name="code">R_ALOF1</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ALOF1'] if 'R_ALOF1' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ALOF1'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Allocation familliale (enfant à 600da) --> <!--fait--><!--validé-->
    <record id="hr_rule_allo_enf600" model="hr.salary.rule">
      <field name="name">Allocation familliale (enfant à 600da)</field>
      <field name="sequence" eval="730"/>
      <field name="code">ALOF2</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['ALOF2'] if 'ALOF2' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['ALOF2'].amount</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
    <!-- Régularisation d'allocation familliale (enfant à 600da) --> <!--fait--><!--validé-->
    <record id="hr_rule_reg_allo_enf600" model="hr.salary.rule">
      <field name="name">Régularisation d'allocation familliale (enfant à 600da)</field>
      <field name="sequence" eval="731"/>
      <field name="code">R_ALOF2</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ALOF2'] if 'R_ALOF2' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ALOF2'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime de scolarité--> <!--fait--><!--validé-
    <record model="hr.salary.rule" id="rule_prime_scolaire">
      <field name="name">Prime Scolarité</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">PSCL</field>
      <field name="sequence">740</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs.PSCL and inputs.PSCL.amount or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs.PSCL.amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record> -->

     <!-- Régularisation de prime de scolarité--> <!--fait--><!--validé
    <record model="hr.salary.rule" id="rule_reg_prime_scolaire">
      <field name="name">Régularisation de prime Scolarité</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_PSCL</field>
      <field name="sequence">741</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs.R_PSCL and inputs.R_PSCL.amount or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs.R_PSCL.amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>-->

    <!-- Indemnité de frais de résidence et d'isolement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_ifri">
      <field name="name">Indemnité de frais de résidence et d'isolement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">IFRI</field>
      <field name="sequence">750</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.ifri or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.ifri</field>
      <field name="quantity">worked_days.WORK100.number_of_days</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité de frais de résidence et d'isolement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_ifri">
      <field name="name">Régularisation d'indemnité de frais de résidence et d'isolement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_IFRI</field>
      <field name="sequence">751</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IFRI'] if 'R_IFRI' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IFRI'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indemnité de zone et de conditions de vie--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_izcv">
      <field name="name">Indemnité de zone et de conditions de vie</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">IZCV</field>
      <field name="sequence">760</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.izcv or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.izcv</field>
      <field name="quantity">worked_days['WORK100'].number_of_days</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indemnité de zone et de conditions de vie--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_izcv">
      <field name="name">Régularisation d'indemnité de zone et de conditions de vie</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_IZCV</field>
      <field name="sequence">761</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IZCV'] if 'R_IZCV' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IZCV'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Indemnité de zone géographique 1 (hauts plateaux)--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_zone1">
      <field name="name">Indemnité de zone géographique 1 (hauts plateaux)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">ZONE1</field>
      <field name="sequence">770</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.izg_un or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">contract.izg_un</field>
      <field name="quantity">worked_days['WORK100'].number_of_days</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indemnité de zone géographique 1 (hauts plateaux)--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_zone1">
      <field name="name">Régularisation d'indemnité de zone géographique 1 (hauts plateaux)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_ZONE1</field>
      <field name="sequence">771</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ZONE1'] if 'R_ZONE1' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ZONE1'].amount</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indemnité de zone géographique 2 (sud)--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_zone2">
      <field name="name">Indemnité de zone géographique 2 (sud)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">ZONE2</field>
      <field name="sequence">780</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.izg_deux or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.izg_deux</field>
      <field name="quantity">worked_days['WORK100'].number_of_days</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'indemnité de zone géographique 2 (sud)--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_zone2">
      <field name="name">Régularisation d'indemnité de zone géographique 2 (sud)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_ZONE2</field>
      <field name="sequence">781</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ZONE2'] if 'R_ZONE2' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ZONE2'].amount</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Indemnité de licenciement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_licen">
      <field name="name">Indemnité de licenciement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">LICEN</field>
      <field name="sequence">790</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['LICEN'] if 'LICEN' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['LICEN'].amount</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité de licenciement--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_licen">
      <field name="name">Régularisation d'indemnité de licenciement</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_LICEN</field>
      <field name="sequence">791</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_LICEN'] if 'R_LICEN' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_LICEN'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


     <!-- Allocation chômage--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_chom">
      <field name="name">Allocation chômage</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">CHOM</field>
      <field name="sequence">800</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['CHOM'] if 'CHOM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['CHOM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'allocation chômage--> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_chom">
      <field name="name">Régularisation d'allocation chômage</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_CHOM</field>
      <field name="sequence">801</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_CHOM'] if 'R_CHOM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_CHOM'].amount</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!-- Salaire Brut-->  <!--fait--><!--validé-->
    <record id="hr_rule_brut" model="hr.salary.rule">
      <field name="name">Salaire Brut</field>
      <field name="sequence" eval="900"/>
      <field name="code">GROSS</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.GROSS"/>
      <field name="condition_select">none</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">(categories['BASIC'] + categories['ALW']) if worked_days['WORK100'].number_of_days != 0 else categories['ALW']</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Salaire NET-->  <!--fait--><!--validé-->
    <record id="hr_rule_taxable" model="hr.salary.rule">
      <field name="name">Salaire Net</field>
      <field name="sequence" eval="910"/>
      <field name="code">NET</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.NET"/>
      <field name="condition_select">none</field>
       <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">(categories['BASIC'] + categories['ALW'] + categories['DED']) if worked_days['WORK100'].number_of_days != 0 else (categories['ALW'] + categories['DED'])</field>
      <field name="quantity">1</field>
      <field name="ampunt_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
       <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!--Temps de travail en jour (mensuel)--> <!--fait--><!--Validé-->
    <record id="hr_rule_temps_travail_j_m" model="hr.salary.rule">
      <field name="name">Temps de travail en jour (mensuel)</field>
      <field name="sequence" eval="111"/>
      <field name="code">TTJM</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute">result = contract.base_mois - ( worked_days['LEAVE90'].number_of_days if 'LEAVE90' in worked_days else 0 ) - ( worked_days['ABSH'].number_of_hours if 'ABSH' in worked_days else 0 ) / categories['HJ']</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!--Temps de travail en jour (jour)--><!--fait--><!--Validé-->
    <record id="hr_rule_temps_travail_j_j" model="hr.salary.rule">
      <field name="name">Temps de travail en jour (jour)</field>
      <field name="sequence" eval="112"/>
      <field name="code">TTJJ</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute">result = worked_days['WORK100'].number_of_days + ( worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0 )</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>


    <!--Temps de travail en heures (mensuel)--><!--fait--><!--Validé-->
    <record id="hr_rule_temps_travail_h_m" model="hr.salary.rule">
      <field name="name">Temps de travail en heures (mensuel)</field>
      <field name="sequence" eval="113"/>
      <field name="code">TTHM</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute">result = 173.33 - ( worked_days['LEAVE90'].number_of_days if 'LEAVE90' in worked_days else 0 ) * categories['HJ'] - ( worked_days['ABSH'].number_of_hours if ['ABSH'] in worked_days else 0 )</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!--Temps de travail en heures (jour)--><!--fait--><!--Validé-->
    <record id="hr_rule_temps_travail_h_j" model="hr.salary.rule">
      <field name="name">Temps de travail en heures (jour)</field>
      <field name="sequence" eval="114"/>
      <field name="code">TTHJ</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute">result = worked_days['WORK100'].number_of_days * categories['HJ'] + ( worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0 ) * categories['HJ']</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>



    <!--Temps de travail en heures (heure)--><!--fait--><!--Validé-->
    <record id="hr_rule_temps_travail_h_h" model="hr.salary.rule">
      <field name="name">Temps de travail en heures (heure)</field>
      <field name="sequence" eval="115"/>
      <field name="code">TTHH</field>
      <field name="active">false</field>
      <field name="appears_on_payslip">true</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.INTERM"/>
      <field name="condition_select">none</field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute">result =  worked_days['WORK100'].number_of_hours + ( worked_days['LEAVE120'].number_of_days if 'LEAVE120' in worked_days else 0 ) * categories['HJ']</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime de rendement collectif -->  <!--Fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_prime_rendement_col">
      <field name="name">Prime de rendement collectif</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">PRC</field>
      <field name="sequence">450</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['PRC'] if 'PRC' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['PRC'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime de rendement collectif -->  <!--Fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_reg_prime_rendement_col">
      <field name="name">Régularisation de prime de rendement collectif</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo"/>
      <field name="code">R_PRC</field>
      <field name="sequence">451</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_PRC'] if 'R_PRC' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_PRC'].amount</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- IRG Consultant --> <!--Fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_irg10">
      <field name="name">IRG Consultant</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">IRGC</field>
      <field name="sequence">540</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">range</field>
      <field name="condition_range">contract.wage</field>
      <field name="condition_range_min">18000</field>
      <field name="condition_range_max">9999999999999</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">-((categories.BASIC + categories.COT + categories.DED + categories.IMP) / 10 ) * 10</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">15</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'IRG Consultant --> <!--Fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_reg_irg10">
      <field name="name">Régularisation d'IRG Consultant</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.DED"/>
      <field name="code">R_IRGC</field>
      <field name="sequence">542</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IRGC'] if 'R_IRGC' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IRGC'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime Exceptionelle --><!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_prime_exceptionnelle">
      <field name="name">Prime Éxceptionnelle</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_10"/>
      <field name="code">EXEP</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['EXEP'] if 'EXEP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['EXEP'].amount</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime Exceptionelle --><!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_prime_exceptionnelle">
      <field name="name">Régularisation de prime Éxceptionnelle</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_10"/>
      <field name="code">R_EXEP</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_EXEP'] if 'R_EXEP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_EXEP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Allocation salarié de nationalité étrangère --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_etrg">
      <field name="name">Allocation salarié de nationalité étrangère</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">ETRG</field>
      <field name="sequence">650</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.etrg or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.etrg</field>
      <field name="quantity">worked_days['WORK100'].number_of_days</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation d'allocation salarié de nationalité étrangère --> <!--fait--><!--validé-->
    <record model="hr.salary.rule" id="rule_reg_etrg">
      <field name="name">Régularisation d'allocation salarié de nationalité étrangère</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_ETRG</field>
      <field name="sequence">651</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ETRG'] if 'R_ETRG' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_ETRG'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>

      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!--Régularisation-->
    <!-- Régularisation de salaire de base mensuel -->
    <record model="hr.salary.rule" id="rule_salaire_reg_base">
      <field name="name">Régularisation de salaire de base</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_BASE</field>
      <field name="sequence">11</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_BASE'] if 'R_BASE' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_BASE'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'absence jours-->
    <record model="hr.salary.rule" id="rule_salaire_rabsj">
      <field name="name">Régularisation d'absence jours</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_ABS</field>
      <field name="sequence">81</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ABS'] if 'R_ABS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ABS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'absence heures-->
    <record model="hr.salary.rule" id="rule_salaire_rabsh">
      <field name="name">Régularisation d'absence heures</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_ABSH</field>
      <field name="sequence">91</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ABSH'] if 'R_ABSH' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ABSH'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de congé impayé-->
    <record model="hr.salary.rule" id="rule_salaire_rim">
      <field name="name">Régularisation de congé impayé</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_IM</field>
      <field name="sequence">93</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IM'] if 'R_IM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de congé maladie-->
    <record model="hr.salary.rule" id="rule_salaire_reg_conge_maladie">
      <field name="name">Régularisation de congé maladie</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_CM</field>
      <field name="sequence">111</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_CM'] if 'R_CM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_CM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de congé maternité-->
    <record model="hr.salary.rule" id="rule_salaire_reg_conge_maternite">
      <field name="name">Régularisation de congé maternité</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.BASIC"/>
      <field name="code">R_CMM</field>
      <field name="sequence">121</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_CMM'] if 'R_CMM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_CMM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

   


    <!-- Régularisation de l'IEP-->
    <record model="hr.salary.rule" id="rule_salaire_reg_iep">
      <field name="name">Régularisation de l'IEP</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_IEP</field>
      <field name="sequence">141</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IEP'] if 'R_IEP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_IEP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime de responsabilité-->
    <record model="hr.salary.rule" id="rule_salaire_reg_responsabilite">
      <field name="name">Régularisation de prime de responsabilité</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_PR</field>
      <field name="sequence">151</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_PR'] if 'R_PR' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_PR'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de nuisance-->
    <record model="hr.salary.rule" id="rule_salaire_reg_nuisance">
      <field name="name">Régularisation de prime de nuisance</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_NUIS</field>
      <field name="sequence">161</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_NUIS'] if 'R_NUIS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_NUIS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de danger-->
    <record model="hr.salary.rule" id="rule_salaire_reg_danger">
      <field name="name">Régularisation de prime de danger</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_DANG</field>
      <field name="sequence">171</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_DANG'] if 'R_DANG' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_DANG'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de rendement individuel-->
    <record model="hr.salary.rule" id="rule_salaire_reg_prind">
      <field name="name">Régularisation de prime de rendement individuel</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_PRI</field>
      <field name="sequence">181</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_PRI'] if 'R_PRI' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_PRI'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité de changement de résidence-->
    <record model="hr.salary.rule" id="rule_salaire_reg_changres">
      <field name="name">Régularisation d'indemnité de changement de résidence</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_ICR</field>
      <field name="sequence">191</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_ICR'] if 'R_ICR' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_ICR'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de congé payé-->
    <record model="hr.salary.rule" id="rule_salaire_reg_conge_paye">
      <field name="name">Régularisation de congé payé</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_CP</field>
      <field name="sequence">201</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_CP'] if 'R_CP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_CP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation des HEURES SUP 50%-->
    <record model="hr.salary.rule" id="rule_salaire_reg_sup50">
      <field name="name">Régularisation des HEURES SUP 50%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_HS50</field>
      <field name="sequence">261</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_HS50'] if 'R_HS50' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_HS50'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation des HEURES SUP 75%-->
    <record model="hr.salary.rule" id="rule_salaire_reg_sup75">
      <field name="name">Régularisation des HEURES SUP 75%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_HS75</field>
      <field name="sequence">271</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_HS75'] if 'R_HS75' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_HS75'].amount</field>
      <field name="quantity">1</field>
      <field name="amoutn_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation des HEURES SUP 100%-->
    <record model="hr.salary.rule" id="rule_salaire_reg_sup100">
      <field name="name">Régularisation des HEURES SUP 100%</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_HS100</field>
      <field name="sequence">281</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_HS100'] if 'R_HS100' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_HS100'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité de congé-->
    <record model="hr.salary.rule" id="rule_salaire_reg_indconge">
      <field name="name">Régularisation d'indemnité de congé</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_INDC</field>
      <field name="sequence">291</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_INDC'] if 'R_INDC' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_INDC'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de l'IFSP-->
    <record model="hr.salary.rule" id="rule_salaire_reg_ifsp">
      <field name="name">Régularisation de l'IFSP</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_IFSP</field>
      <field name="sequence">301</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IFSP'] if 'R_IFSP' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_IFSP'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de l'IFS-->
    <record model="hr.salary.rule" id="rule_salaire_reg_ifs">
      <field name="name">Régularisation de l'IFS</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_IFS</field>
      <field name="sequence">311</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_IFS'] if 'R_IFS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage_base">inputs['R_IFS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation d'indemnité travail posté a 10% (05h à 21h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_trsptc10">
        <field name="name">Régularisation d'indemnité travail posté à 10% (05h à 21h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_TRPST10</field>
        <field name="sequence">321</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_TRPST10'] if 'R_TRPST10' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_TRPST10'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité travail posté a 10% + 5% (21h à 00h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_trsptc15">
        <field name="name">Régularisation d'ndemnité travail posté à 10% + 5% (21h à 00h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_TRPST15</field>
        <field name="sequence">331</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_TRPST15'] if 'R_TRPST15' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_TRPST15'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité travail posté a 10% + 15% (00h à 15h) --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_trsptc25">
        <field name="name">Régularisation d'indemnité travail posté à 10% + 15% (00h à 15h)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_TRPST25</field>
        <field name="sequence">341</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_TRPST25'] if 'R_TRPST25' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_TRPST25'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <!-- Régularisation d'astreinte et de disponibilité permenenant --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_astr">
        <field name="name">Régularisation d'astreinte et de disponibilité permenenant</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_ASTR</field>
        <field name="sequence">351</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_ASTR'] if 'R_ASTR' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_ASTR'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Régularisation d'indemnité des activités d'enseignement --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_ensg">
        <field name="name">Régularisation d'indemnité des activités d'enseignement</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_ENSG</field>
        <field name="sequence">361</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_ENSG'] if 'R_ENSG' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_ENSG'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

       <!-- Régularisation d'indemnité de gestion et de responsabilité --> <!--FAIT--><!--Validé-->
      <record model="hr.salary.rule" id="rule_reg_gesres">
        <field name="name">Régularisation d'indemnité de gestion et de responsabilité</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">R_GESRES</field>
        <field name="sequence">371</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['R_GESRES'] if 'R_GESRES' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['R_GESRES'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Modif v Regles SECU.SLE-->
      
      <record model="hr.salary.rule" id="rule_secu_sle_25">
        <field name="name">Retenue SECU.SLE Patronale_25</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COMP"/>
        <field name="code">SS25</field>
        <field name="sequence">431</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = not employee.avnt_social or employee.nat_cot1 == 'R22'</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else -(categories['ALW'] )</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">24</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <record model="hr.salary.rule" id="rule_secu_sle_16">
        <field name="name">Retenue SECU.SLE Patronale_16</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COMP"/>
        <field name="code">SS16</field>
        <field name="sequence">432</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.avnt_social and employee.nat_cot1 == 'R06'</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else -(categories['ALW'] )</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">15</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>
      <record model="hr.salary.rule" id="rule_secu_sle_06">
        <field name="name">Retenue SECU.SLE Patronale_06</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COMP"/>
        <field name="code">SS06</field>
        <field name="sequence">433</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.avnt_social and employee.nat_cot1 == 'R07'</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else -(categories['ALW'] )</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">5</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>
      <record model="hr.salary.rule" id="rule_secu_sle_05_1">
        <field name="name">Retenue SECU.SLE Logement Patronale 0,5%</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COMP"/>
        <field name="code">SS05_1</field>
        <field name="sequence">435</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="condition_select">none</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else -(categories['ALW'] )</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">0.5</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>


      <record model="hr.salary.rule" id="rule_secu_sle_05_2">
        <field name="name">Retenue SECU.SLE Oeuvres Sociales Patronale 0,5%</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.COMP"/>
        <field name="code">SS05_2</field>
        <field name="sequence">436</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">false</field>
        <field name="condition_select">none</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">-(categories['BASIC'] + categories['ALW'] ) if worked_days['WORK100'].number_of_days != 0 else -(categories['ALW'] )</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">0.5</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Modif v Remboursement débours-->
      <record model="hr.salary.rule" id="rule_debour">
        <field name="name">Remboursement débours</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
        <field name="code">DEBOUR</field>
        <field name="sequence">391</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['DEBOUR'] if 'DEBOUR' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['DEBOUR'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]><field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <record model="hr.salary.rule" id="rule_stc">
        <field name="name">SOLDE TOUT COMPTE (STC)</field>
        <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
        <field name="code">STC</field>
        <field name="sequence">391</field>
        <field name="active">true</field>
        <field name="appears_on_payslip">true</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result=inputs['STC'] if 'STC' in inputs else False</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">inputs['STC'].amount</field>
        <field name="quantity">1</field>
        <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
        <field name="amount_percentage">100</field>
        <field name="struct_id" ref="hr_payroll.default_structure"/>
      </record>

      <!-- Prime Objectif -->
    <record model="hr.salary.rule" id="rule_prime_objectif">
      <field name="name">Prime Objectif</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_10"/>
      <field name="code">OBJ</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['OBJ'] if 'OBJ' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['OBJ'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime Objectif -->
    <record model="hr.salary.rule" id="rule_reg_prime_objectif">
      <field name="name">Régularisation de prime Objectif</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_10"/>
      <field name="code">R_OBJ</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_OBJ'] if 'R_OBJ' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_OBJ'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime Productivite -->
    <record model="hr.salary.rule" id="rule_prime_Productivite">
      <field name="name">Prime Productivite</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">PROD</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['PROD'] if 'PROD' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['PROD'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Régularisation de prime Productivite -->
    <record model="hr.salary.rule" id="rule_reg_prime_Productivite">
      <field name="name">Régularisation de prime Productivite</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_PROD</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_PROD'] if 'R_PROD' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_PROD'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- indemnite de sujection -->
     <record model="hr.salary.rule" id="rule_indemnite_sujection">
      <field name="name">Indemnite de sujection</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">SUJ</field>
      <field name="sequence">150</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.indemnite_sujection or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.wage</field>
      <field name="quantity">worked_days['WORK100'].number_of_days / contract.base_mois * contract.indemnite_sujection</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_qty = contract.indemnite_sujection/100
result_rate = tmp_rate
result = contract.wage * (1 + (( inputs['HS50'].amount *1.50 if 'HS50' in inputs else 0) + ( inputs['HS75'].amount *1.750 if 'HS75' in inputs else 0) + ( inputs['HS100'].amount *2 if 'HS100' in inputs else 0) )/173.33)]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
    
   <!-- Régularisation de indemnite de sujection -->
   <record model="hr.salary.rule" id="rule_reg_indemnite_sujection">
    <field name="name">Régularisation de indemnite de sujection</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">R_SUJ</field>
    <field name="sequence">151</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_SUJ'] if 'R_SUJ' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['R_SUJ'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

  <!-- Prime salissure -->
  <record model="hr.salary.rule" id="rule_prime_salissure">
    <field name="name">prime de salissure</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">SAL</field>
    <field name="sequence">150</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
      <field name="condition_python">result = contract['prime_salissure'] if 'prime_salissure' in contract else 0</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">contract.prime_salissure</field>
    <field name="quantity">worked_days['WORK100'].number_of_days</field>
    <field name="amount_percentage">100</field>
    <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>
  
 <!-- Régularisation de prime de salissure -->
  <record model="hr.salary.rule" id="rule_reg_prime_salissure">
    <field name="name">Régularisation de prime de salissure</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">R_SAL</field>
    <field name="sequence">151</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_SAL'] if 'R_SAL' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['R_SAL'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

  <!-- Prime encouragement -->
  <record model="hr.salary.rule" id="rule_prime_encouragement">
    <field name="name">Prime encouragement</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">ECRG</field>
    <field name="sequence">490</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['ECRG'] if 'ECRG' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['ECRG'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

   <!-- Régularisation de prime encouragement -->
  <record model="hr.salary.rule" id="rule_reg_prime_encouragement">
    <field name="name">Régularisation de prime encouragement</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">R_ECRG</field>
    <field name="sequence">491</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_ECRG'] if 'R_ECRG' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['R_ECRG'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

  <!-- indemnite interim -->
  <record model="hr.salary.rule" id="rule_indemnite_interim">
    <field name="name">indemnite interim</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">INTERIM</field>
    <field name="sequence">490</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['INTERIM'] if 'INTERIM' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['INTERIM'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

   <!-- Régularisation de indemnite interim -->
  <record model="hr.salary.rule" id="rule_reg_indemnite_interim">
    <field name="name">Régularisation de indemnite interim</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">R_INTERIM</field>
    <field name="sequence">491</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_INTERIM'] if 'R_INTERIM' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['R_INTERIM'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

  <!-- Prime 13eme mois -->
    <record model="hr.salary.rule" id="rule_prime_13eme_mois">
      <field name="name">Prime 13eme mois</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">M13</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['M13'] if 'M13' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['M13'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime 13eme mois -->
    <record model="hr.salary.rule" id="rule_reg_prime_13eme_mois">
      <field name="name">Régularisation de prime 13eme mois</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">R_M13</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_M13'] if 'R_M13' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_M13'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

     <!-- Prime de scolarite-->
    <record model="hr.salary.rule" id="rule_prime_scolarite">
      <field name="name">Prime de scolarite</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">SCOL</field>
      <field name="sequence">600</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result = contract['prime_scolarite'] if 'prime_scolarite' in contract else 0</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.prime_scolarite</field>
      <field name="quantity">worked_days['WORK100'].number_of_days / contract.base_mois</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation prime de scolarite-->
    <record model="hr.salary.rule" id="rule_reg_prime_scolarite">
      <field name="name">Régularisation prime de scolarite</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_SCOL</field>
      <field name="sequence">601</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_SCOL'] if 'R_SCOL' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_SCOL'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime de naissance -->
    <record model="hr.salary.rule" id="rule_prime_naissance">
      <field name="name">Prime de naissance</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">NAISS</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['NAISS'] if 'NAISS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['NAISS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de naissance -->
    <record model="hr.salary.rule" id="rule_reg_prime_naissance">
      <field name="name">Régularisation de prime de naissance</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_NAISS</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_NAISS'] if 'R_NAISS' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_NAISS'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime de mouton -->
    <record model="hr.salary.rule" id="rule_prime_mouton">
      <field name="name">Prime de mouton</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">MOUTON</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['MOUTON'] if 'MOUTON' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['MOUTON'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de mouton -->
    <record model="hr.salary.rule" id="rule_reg_prime_mouton">
      <field name="name">Régularisation de prime de mouton</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_MOUTON</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_MOUTON'] if 'R_MOUTON' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_MOUTON'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Prime de ramadhan -->
    <record model="hr.salary.rule" id="rule_prime_ramadhan">
      <field name="name">Prime de ramadhan</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">RAM</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['RAM'] if 'RAM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['RAM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de prime de ramadhan -->
    <record model="hr.salary.rule" id="rule_reg_prime_ramadhan">
      <field name="name">Régularisation de prime de ramadhan</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_RAM</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_RAM'] if 'RAM' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_RAM'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- retenu sur salaire -->
    <record model="hr.salary.rule" id="rule_retenu_salaire">
      <field name="name">retenu sur salaire</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">RETSA</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['RETSA'] if 'RETSA' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['RETSA'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de retenu sur salaire -->
    <record model="hr.salary.rule" id="rule_reg_retenu_salaire">
      <field name="name">Régularisation de retenu sur salaire</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_RETSA</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_RETSA'] if 'R_RETSA' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_RETSA'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- retenu prêt -->
    <record model="hr.salary.rule" id="rule_retenu_pret">
      <field name="name">retenu prêt</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">RETPRET</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['RETPRET'] if 'RETPRET' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['RETPRET'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de retenu prêt -->
    <record model="hr.salary.rule" id="rule_reg_retenu_pret">
      <field name="name">Régularisation de retenu prêt</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_RETPRET</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_RETPRET'] if 'R_RETPRET' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_RETPRET'].amount</field>
      <field name="quantity">1</field>
      <field name="amountpython_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Avance sur salaire -->
    <record model="hr.salary.rule" id="rule_avance_salaire">
      <field name="name">Avance sur salaire</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">AVNSAL</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['AVNSAL'] if 'AVNSAL' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['AVNSAL'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- Régularisation de Avance sur salaire -->
    <record model="hr.salary.rule" id="rule_reg_avance_salaire">
      <field name="name">Régularisation Avance sur salaire</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
      <field name="code">R_AVNSAL</field>
      <field name="sequence">491</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['R_AVNSAL'] if 'R_AVNSAL' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['R_AVNSAL'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- prime de depart en retaraite -->
    <record model="hr.salary.rule" id="rule_depart_retraite">
      <field name="name">prime de depart en retaraite</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_impo_10"/>
      <field name="code">DEPRET</field>
      <field name="sequence">490</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result=inputs['DEPRET'] if 'DEPRET' in inputs else False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">inputs['DEPRET'].amount</field>
      <field name="quantity">1</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
      <field name="amount_percentage">100</field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>

    <!-- IFSP pourcentage par mois --> <!--fait--><!--Validé-->
    <record model="hr.salary.rule" id="rule_ifspp">
      <field name="name">I.F.S.P (%)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">IFSPP</field>
      <field name="sequence">300</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.ifspp or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.wage</field>
      <field name="quantity">worked_days['WORK100'].number_of_days / contract.base_mois * contract.ifspp</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_qty = contract.ifspp /100
result_rate = tmp_rate
result = contract.wage * (1 + (( inputs['HS50'].amount *1.50 if 'HS50' in inputs else 0) + ( inputs['HS75'].amount *1.750 if 'HS75' in inputs else 0) + ( inputs['HS100'].amount *2 if 'HS100' in inputs else 0) )/173.33)]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
     
    <!-- prime de quart (2*8) (%) -->
    <record model="hr.salary.rule" id="rule_prime_quart_2_8">
      <field name="name">prime de quart (2*8) (%)</field>
      <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
      <field name="code">PQR28</field>
      <field name="sequence">150</field>
      <field name="active">true</field>
      <field name="appears_on_payslip">true</field>
      <field name="condition_select">python</field>
      <field name="condition_python">result= contract.prq or False</field>
      <field name="amount_select">percentage</field>
      <field name="amount_percentage_base">contract.wage</field>
      <field name="quantity">worked_days['WORK100'].number_of_days * contract.prq</field>
      <field name="amount_percentage">100</field>
      <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_qty = contract.prq /100
result_rate = tmp_rate
result = contract.wage * (1 + (( inputs['HS50'].amount *1.50 if 'HS50' in inputs else 0) + ( inputs['HS75'].amount *1.750 if 'HS75' in inputs else 0) + ( inputs['HS100'].amount *2 if 'HS100' in inputs else 0) )/173.33)]]></field>
      <field name="struct_id" ref="hr_payroll.default_structure"/>
    </record>
    
   <!-- Régularisation de prime de quart (2*8) (%) -->
   <record model="hr.salary.rule" id="rule_reg_prime_quart_2_8">
    <field name="name">Régularisation de prime de quart (2*8)</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">R_PQR28</field>
    <field name="sequence">151</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_PQR28'] if 'R_PQR28' in inputs else False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">inputs['R_PQR28'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

  <!-- prime de quart (3*8) (%) -->
  <record model="hr.salary.rule" id="rule_prime_quart_3_8">
    <field name="name">prime de quart (3*8) (%)</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
    <field name="code">PQR38</field>
    <field name="sequence">150</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result= contract.prqq or False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">contract.wage</field>
    <field name="quantity">worked_days['WORK100'].number_of_days * contract.prqq</field>
    <field name="amount_percentage">100</field>
    <field name="amount_python_compute"><![CDATA[tmp_rate=categories['COEFF'] *100
result_qty = contract.prqq /100
result_rate = tmp_rate
result = contract.wage * (1 + (( inputs['HS50'].amount *1.50 if 'HS50' in inputs else 0) + ( inputs['HS75'].amount *1.750 if 'HS75' in inputs else 0) + ( inputs['HS100'].amount *2 if 'HS100' in inputs else 0) )/173.33)]]></field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>
  
 <!-- Régularisation de prime de quart (3*8) (%) -->
 <record model="hr.salary.rule" id="rule_reg_prime_quart_3_8">
  <field name="name">Régularisation de prime de quart (3*8)</field>
  <field name="category_id" ref="sibic_hr_payroll_rules_dz.category_cot"/>
  <field name="code">R_PQR38</field>
  <field name="sequence">151</field>
  <field name="active">true</field>
  <field name="appears_on_payslip">true</field>
  <field name="condition_select">python</field>
  <field name="condition_python">result=inputs['R_PQR38'] if 'R_PQR38' in inputs else False</field>
  <field name="amount_select">percentage</field>
  <field name="amount_percentage_base">inputs['R_PQR38'].amount</field>
  <field name="quantity">1</field>
  <field name="amount_python_compute"><![CDATA[Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
  <field name="amount_percentage">100</field>
  <field name="struct_id" ref="hr_payroll.default_structure"/>
</record>
  <!-- prime de déplacement -->
  <record model="hr.salary.rule" id="rule_prime_deplacement">
    <field name="name">frais de déplacement</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
    <field name="code">PDPL</field>
    <field name="sequence">601</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result= contract.frais_deplacement or False</field>
    <field name="amount_select">percentage</field>
    <field name="amount_percentage_base">contract.wage</field>
    <field name="quantity">worked_days['WORK100'].number_of_days * contract.frais_deplacement</field>
    <field name="amount_percentage">100</field>
    <field name="amount_python_compute">contract.frms</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>
  
  <!-- Régularisation de prime déplacement -->
  <record model="hr.salary.rule" id="rule_reg_prime_deplacement">
    <field name="name">Régularisation de frais de déplacement</field>
    <field name="category_id" ref="sibic_hr_payroll_rules_dz.ALW"/>
    <field name="code">R_PDPL</field>
    <field name="sequence">602</field>
    <field name="active">true</field>
    <field name="appears_on_payslip">true</field>
    <field name="condition_select">python</field>
    <field name="condition_python">result=inputs['R_PDPL'] if 'R_PDPL' in inputs else False</field>
    <field name="amount_select">percentage</field>
    
    <field name="amount_percentage_base">inputs['R_PDPL'].amount</field>
    <field name="quantity">1</field>
    <field name="amount_python_compute"><![CDATA[ Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10]]></field>
    <field name="amount_percentage">100</field>
    <field name="struct_id" ref="hr_payroll.default_structure"/>
  </record>

</data>
  
</odoo>
